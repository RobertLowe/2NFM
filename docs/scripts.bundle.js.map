{"version":3,"sources":["webpack:///./scripts.js"],"names":[],"mappings":";;;;AAAA;AACA,iBAAiB;AACjB;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC;AAClC,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","file":"scripts.bundle.js","sourcesContent":["(function() {\n  var params = {},\n      r = /([^&=]+)=?([^&]*)/g,\n      DEFAULTS = { s: '2nfm', bandwidth: 8192 };\n\n  function d(s) {\n      return decodeURIComponent(s.replace(/\\+/g, ' '));\n  }\n\n  var match, search = window.location.search;\n  while (match = r.exec(search.substring(1)))\n      params[d(match[1])] = d(match[2]);\n\n  window.params = Object.assign({}, DEFAULTS, params);\n})();\n\nvar infoBar = document.getElementById('info-bar');\nvar body = document.getElementsByTagName(\"BODY\")[0];\n\n// http://www.rtcmulticonnection.org/docs/constructor/\nvar connection = new RTCMultiConnection(params.s);\nconnection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\nconnection.autoCloseEntireSession = true;\n\n// this must match the extension page\nconnection.socketMessageEvent = 'desktopCapture';\n\nconnection.enableLogs = true;\nconnection.session = {\n  audio: true,\n  video: true,\n  data: true,\n  oneway: true\n};\n\n// www.rtcmulticonnection.org/docs/sdpConstraints/\nconnection.sdpConstraints.mandatory = {\n  OfferToReceiveAudio: true,\n  OfferToReceiveVideo: true\n};\n\nconnection.getExternalIceServers = false;\nconnection.iceServers = IceServersHandler.getIceServers();\n\nfunction setBandwidth(sdp) {\n  sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\n  sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:10000\\r\\n');\n  return sdp;\n}\n\nconnection.processSdp = function(sdp) {\n  var bandwidth = params.bandwidth;\n  var codecs = params.codecs;\n  \n  if (bandwidth) {\n      try {\n          bandwidth = parseInt(bandwidth);\n      } catch (e) {\n          bandwidth = null;\n      }\n\n      if (bandwidth && bandwidth != NaN && bandwidth != 'NaN' && typeof bandwidth == 'number') {\n          sdp = setBandwidth(sdp, bandwidth);\n          sdp = BandwidthHandler.setVideoBitrates(sdp, {\n              min: bandwidth,\n              max: bandwidth\n          });\n      }\n  }\n\n  if (!!codecs && codecs !== 'default') {\n      sdp = CodecsHandler.preferCodec(sdp, codecs);\n  }\n  return sdp;\n};\n\nconnection.optionalArgument = {\n  optional: [],\n  mandatory: {}\n};\n\nconnection.onstatechange = function(state) {\n  infoBar.innerHTML = state.name + ': ' + state.reason;\n\n  if(state.name == 'request-rejected' && params.p) {\n      infoBar.innerHTML = 'Password (' + params.p + ') did not match with broadcaster, that is why your participation request has been rejected.<br>Please contact him and ask for valid password.';\n  }\n\n  if(state.name === 'room-not-available') {\n      infoBar.innerHTML = 'Screen share session is closed or paused. You will join automatically when share session is resumed.';\n  }\n};\n\nconnection.onstreamid = function(event) {\n  infoBar.innerHTML = 'Remote peer is about to send his screen.';\n};\n\nvar playButton = document.getElementById('play-button-container');\nvar volumeSlider = document.getElementById('volume-slider');\n\nvar video = document.getElementById('video');\nvar audio = document.getElementById('audio');\n\nvideo.onplay = (event) => {\n  playButton.classList.add('playing');\n};\n\nvideo.onpause = (event) => {\n  playButton.classList.remove('playing');\n};\n\naudio.onplay = (event) => {\n  playButton.classList.add('playing');\n};\n\naudio.onpause = (event) => {\n  playButton.classList.remove('playing');\n};\n\nvar stream = null;\nconnection.onstream = function(e) {\n  video.srcObject = null;\n  audio.srcObject = null;\n  stream = e.stream;\n  stream.mute();\n  if (stream.isVideo) {\n    video.removeAttribute('hidden');\n    video.srcObject = stream;\n    video.srcObject.getVideoTracks()[0].enabled = true;\n    video.srcObject.getAudioTracks()[0].enabled = true;\n    video.volume = 0.5;\n    video.play();\n  } else {\n    audio.removeAttribute('hidden');\n    audio.srcObject = stream;\n    audio.srcObject.getAudioTracks()[0].enabled = true;\n    audio.volume = 0.5;\n    audio.play();\n    playButton.removeAttribute('disabled');\n  }\n  volumeSlider.removeAttribute('disabled');\n  body.classList.add(\"stream-live\");\n};\n\nwindow.togglePlayback = function() {\n  if (stream.isVideo) {\n    video.paused ? video.play() : video.pause();\n    // console.dir(video.paused);\n  } else {\n    audio.paused ? audio.play() : audio.pause();\n  }\n};\n\nwindow.setVolume = function(input) {\n    audio.volume = input;\n    video.volume = input;\n}\n\n// if user left\nconnection.onleave = connection.onstreamended = connection.onSessionClosed = function(e) {\n  if(e.userid !== params.s) return;\n\n  video.srcObject = null;\n  \n  infoBar.innerHTML = 'Screen sharing has been closed.';\n  body.classList.remove('stream-live');\n  statsBar.setAttribute('hidden', '');\n  connection.close();\n  connection.closeSocket();\n  connection.userid = connection.token();\n\n  location.reload();\n};\n\nconnection.onJoinWithPassword = function(remoteUserId) {\n  if(!params.p) {\n      params.p = prompt(remoteUserId + ' is password protected. Please enter the pasword:');\n  }\n\n  connection.password = params.p;\n  connection.join(remoteUserId);\n};\n\nconnection.onInvalidPassword = function(remoteUserId, oldPassword) {\n  var password = prompt(remoteUserId + ' is password protected. Your entered wrong password (' + oldPassword + '). Please enter valid pasword:');\n  connection.password = password;\n  connection.join(remoteUserId);\n};\n\nconnection.onPasswordMaxTriesOver = function(remoteUserId) {\n  alert(remoteUserId + ' is password protected. Your max password tries exceeded the limit.');\n};\n\nconnection.onSocketDisconnect = function(event) {\n  // alert('Connection to the server is closed.');\n  if(connection.getAllParticipants().length > 0) return;\n  location.reload();\n};\n\nconnection.onSocketError = function(event) {\n  alert('Unable to connect to the server. Please try again.');\n      \n  setTimeout(function() {\n      location.reload();\n  }, 1000);\n};\n\nconnection.onopen = function(event) {\n  // \n};\n\nvar chatContainer = document.getElementById('chat-container');\nvar lastMessage = '';\nconnection.onmessage = function(event) {\n  if(event.data.openChat === true) {\n    chatContainer.removeAttribute('hidden');\n  }\n\n  if(event.data.closeChat === true) {\n    chatContainer.setAttribute('hidden', '');\n  }\n\n  if(event.data.newChatMessage && event.data.newChatMessage != lastMessage) {\n    lastMessage = event.data.newChatMessage;\n\n    // there is a possibility that broadcaster did not send \"openChat:true\" signal\n    // chatContainer.removeAttribute('hidden');\n\n    appendChatMessage('Broadcaster', event.data.newChatMessage);\n    updateTitle(event.data.newChatMessage);\n    connection.send({\n        receivedChatMessage: true,\n        checkmark_id: event.data.checkmark_id\n    });\n  }\n\n  if(event.data.receivedChatMessage) {\n    if(document.getElementById(event.data.checkmark_id)) {\n        document.getElementById(event.data.checkmark_id).style.display = '';\n    }\n  }\n};\n\nvar txtChatMessage = document.getElementById('txt-chat-message');\nvar chatMessages = document.getElementById('chat-messages');\n\ntxtChatMessage.onkeyup = function(e) {\n  if(e.keyCode === 13) {\n    var checkmark_id = (Math.random()*100).toString().replace('.', '');\n    appendChatMessage('You', this.value, checkmark_id);\n    connection.send({\n        newChatMessage: this.value\n    });\n    this.value = '';\n  }\n};\n\nfunction appendChatMessage(name, message, checkmark_id) {\n  var div = document.createElement('div');\n  if(checkmark_id) {\n      div.innerHTML = '<p><span class=\"name\">' + name + ': <img class=\"checkmark\" id=\"' + checkmark_id + '\" title=\"Received\" src=\"images/checkmark.png\"></span></p><p>' + message + '</p>';\n  }\n  else {\n      div.innerHTML = '<p><span class=\"name\">' + name + ':</span></p><p>' + message + '</p>';\n  }\n  chatMessages.appendChild(div);\n\n  chatMessages.scrollTop = chatMessages.clientHeight;\n  chatMessages.scrollTop = chatMessages.scrollHeight - chatMessages.scrollTop;\n}\n\nvar tabTitle = document.getElementById('tab-title');\nfunction updateTitle(message) {\n  tabTitle.innerHTML = message;\n}\n\nconnection.socketCustomEvent = params.s;\n\nlet presenceCheckWait = 1000;\n\nfunction checkPresence() {\n  // infoBar.innerHTML = 'Checking room: ' + params.s;\n\n  connection.checkPresence(params.s, function(isRoomExist, roomid, extra) {\n      if (isRoomExist === false) {\n        let noHostMessage = 'No one is currently hosting the room: ' + params.s;\n        if (infoBar.innerHTML != noHostMessage) {\n          infoBar.innerHTML = noHostMessage;\n        }\n\n        setTimeout(function() {\n            console.log('checked', presenceCheckWait);\n            presenceCheckWait < 60000 && (presenceCheckWait = presenceCheckWait * 2);\n            setTimeout(checkPresence, presenceCheckWait);\n        }, 4000);\n        return;\n      }\n\n      infoBar.innerHTML = 'Joining room: ' + params.s;\n\n      connection.password = null;\n      if (params.p) {\n          connection.password = params.p;\n      }\n\n      connection.join(params.s);\n  });\n}\n\nif(params.s) {\n  checkPresence();\n}\n\nvar dontDuplicate = {};\nconnection.onPeerStateChanged = function(event) {\n  if(!connection.getRemoteStreams(params.s).length) {\n      if(event.signalingState === 'have-remote-offer') {\n          infoBar.innerHTML = 'Received WebRTC offer from: ' + params.s;\n      }\n\n      else if(event.iceGatheringState === 'complete' && event.iceConnectionState === 'connected') {\n          infoBar.innerHTML = 'WebRTC handshake is completed. Waiting for remote video from: ' + params.s;\n      }\n  }\n\n  if(event.iceConnectionState === 'connected' && event.signalingState === 'stable') {\n      if(dontDuplicate[event.userid]) return;\n      dontDuplicate[event.userid] = true;\n\n      var peer = connection.peers[event.userid].peer;\n\n      getStats(peer, function(stats) {\n          onGettingWebRCStats(stats, event.userid);\n\n          if(video.paused) {\n              video.play();\n          }\n      }, 1000);\n\n      // statsBar.removeAttribute('hidden');\n  }\n};\n\nvar statsBar = document.getElementById('stats-bar');\nvar statsBarHTML = document.getElementById('stats-bar-html');\nvar NO_MORE = false;\n\ndocument.getElementById('show-stats-bar').onclick = function() {\n  statsBar.toggleAttribute('hidden');\n  NO_MORE = false;\n};\n\ndocument.getElementById('hide-stats-bar').onclick = function() {\n  statsBar.setAttribute('hidden', '');\n  NO_MORE = true;\n};\n\ndocument.getElementById('show-chats').onclick = function() {\n  chatContainer.toggleAttribute('hidden');\n  chatMessages.scrollTo(0,chatMessages.scrollHeight);\n};\n\nfunction onGettingWebRCStats(stats, userid) {\n  if(!connection.peers[userid] || NO_MORE) {\n      stats.nomore();\n      return;\n  }\n\n  var html = 'Video: ' + stats.video.recv.codecs;\n  html += '<br>';\n  html += 'Resolution: ' + stats.resolutions.recv.width + 'x' + stats.resolutions.recv.height;\n  html += '<br>';\n  html += 'Audio: ' + stats.audio.recv.codecs;\n  html += '<br>';\n  html += 'Data: ' + bytesToSize(stats.audio.bytesReceived + stats.video.bytesReceived);\n  // html += '<br>';\n  // html += 'Speed: ' + bytesToSize(stats.bandwidth.speed || 0);\n  statsBarHTML.innerHTML = html;\n}\n\nfunction bytesToSize(bytes) {\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes === 0) {\n      return '0 Bytes';\n  }\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n  return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\nwindow.addEventListener('offline', function() {\n  infoBar.innerHTML = 'You seem to be offline.';\n}, false);\n\nwindow.addEventListener('online', function() {\n  infoBar.innerHTML = 'You are back online. Reloading the page...';\n  location.reload();\n}, false);\n\ndocument.addEventListener('copy', function(e) {\n  e.clipboardData.setData('text/plain', e.target.textContent);\n  e.preventDefault();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./scripts.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}